# -*- coding: utf-8 -*-
"""MFDS.1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y_hYxnIJtUnBAVhm4obRZ0SJlZnPcWUE
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats

data = pd.read_csv('/content/train.csv')
print(data.head)

sales_data = data['Item_Outlet_Sales'].dropna()
print(sales_data)

mean=np.mean(sales_data)
median=np.median(sales_data)
mode=stats.mode(sales_data)
var=np.var(sales_data)
std=np.std(sales_data)
print(f'Mean: {mean}')
print(f'Median: {median}')
print(f'Standard deviation: {std}')
print(f'Variance: {var}')
print(f'Mode: {mode}')

skewness=stats.skew(sales_data)
print(f'skewness: {skewness}')

kurtosis = stats.kurtosis(sales_data)
print(f'Kurtosis: {kurtosis}')

if skewness>0:
  print('Positive Skewness')

elif skewness<0:
  print('Negative Skewness')
  print('Zero Skewness')

if kurtosis>0:
  print('Positive Kurtosis')

elif kurtosis<0:
  print('Negative Kurtosis')

elif kurtosis==0:
  print('Zero Kurtosis')

range=np.max(sales_data)-np.min(sales_data)
print(f'Range: {range}')

plt.hist(sales_data , bins=10)
plt.xlabel('Item_Outlet_Sales')
plt.ylabel('Frequency')
plt.title('Histogram of Item_Outlet_Sales')
plt.show()

plt.boxplot(sales_data)
plt.ylabel('Item_Outlet_Sales')
plt.title('Boxplot of Item_Outlet_Sales')
plt.show()


plt.scatter(data['Item_Weight'], data['Item_Outlet_Sales'])
plt.xlabel('Item_Weight')
plt.ylabel('Item_Outlet_Sales')
plt.title('Scatter Plot of Item_Weight vs. Item_Outlet_Sales')
plt.show()

plt.axvline(mean,color='red',linestyle='dashed',linewidth=1)
plt.axvline(median,color='green',linestyle='dashed',linewidth=1)
# plt.axvline(mode,color='blue',linestyle='dashed',linewidth=1)
plt.show()

results=pd.DataFrame()
results['Mean'] = mean
results['Median'] = median
results['Mode'] = mode
results['Variance'] = var
results['Standard Deviation'] = std
results['Skewness'] = skewness
results['Kurtosis'] = kurtosis
results['Range'] = range
print(results)

results.to_csv('results.csv', index=False)
results.to_excel('results.xlsx', index=False)